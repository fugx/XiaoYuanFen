package com.theaty.xiaoyuan.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.theaty.xiaoyuan.model.utils.StringConverter;
import java.util.List;

import com.theaty.xiaoyuan.model.xiaoyuan.Member;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEMBER".
*/
public class MemberDao extends AbstractDao<Member, Long> {

    public static final String TABLENAME = "MEMBER";

    /**
     * Properties of entity Member.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MemberId = new Property(0, Long.class, "memberId", true, "_id");
        public final static Property Nick = new Property(1, String.class, "nick", false, "NICK");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Head = new Property(3, String.class, "head", false, "HEAD");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Gender = new Property(5, String.class, "gender", false, "GENDER");
        public final static Property Age = new Property(6, Long.class, "age", false, "AGE");
        public final static Property Area = new Property(7, String.class, "area", false, "AREA");
        public final static Property Phone = new Property(8, String.class, "phone", false, "PHONE");
        public final static Property QQ = new Property(9, String.class, "QQ", false, "QQ");
        public final static Property Wechat = new Property(10, String.class, "wechat", false, "WECHAT");
        public final static Property Photoes = new Property(11, String.class, "photoes", false, "PHOTOES");
        public final static Property Vip = new Property(12, int.class, "vip", false, "VIP");
    }

    private DaoSession daoSession;

    private final StringConverter photoesConverter = new StringConverter();
    private Query<Member> member_FocusQuery;
    private Query<Member> member_FunsQuery;
    private Query<Member> play_ConnectsQuery;
    private Query<Member> play_MemberListQuery;
    private Query<Member> type_MemberListQuery;

    public MemberDao(DaoConfig config) {
        super(config);
    }
    
    public MemberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEMBER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: memberId
                "\"NICK\" TEXT," + // 1: nick
                "\"PASSWORD\" TEXT," + // 2: password
                "\"HEAD\" TEXT," + // 3: head
                "\"NAME\" TEXT," + // 4: name
                "\"GENDER\" TEXT," + // 5: gender
                "\"AGE\" INTEGER," + // 6: age
                "\"AREA\" TEXT," + // 7: area
                "\"PHONE\" TEXT," + // 8: phone
                "\"QQ\" TEXT," + // 9: QQ
                "\"WECHAT\" TEXT," + // 10: wechat
                "\"PHOTOES\" TEXT," + // 11: photoes
                "\"VIP\" INTEGER NOT NULL );"); // 12: vip
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEMBER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Member entity) {
        stmt.clearBindings();
 
        Long memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindLong(1, memberId);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(2, nick);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(4, head);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(6, gender);
        }
 
        Long age = entity.getAge();
        if (age != null) {
            stmt.bindLong(7, age);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(8, area);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String QQ = entity.getQQ();
        if (QQ != null) {
            stmt.bindString(10, QQ);
        }
 
        String wechat = entity.getWechat();
        if (wechat != null) {
            stmt.bindString(11, wechat);
        }
 
        List photoes = entity.getPhotoes();
        if (photoes != null) {
            stmt.bindString(12, photoesConverter.convertToDatabaseValue(photoes));
        }
        stmt.bindLong(13, entity.getVip());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Member entity) {
        stmt.clearBindings();
 
        Long memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindLong(1, memberId);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(2, nick);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(4, head);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(6, gender);
        }
 
        Long age = entity.getAge();
        if (age != null) {
            stmt.bindLong(7, age);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(8, area);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String QQ = entity.getQQ();
        if (QQ != null) {
            stmt.bindString(10, QQ);
        }
 
        String wechat = entity.getWechat();
        if (wechat != null) {
            stmt.bindString(11, wechat);
        }
 
        List photoes = entity.getPhotoes();
        if (photoes != null) {
            stmt.bindString(12, photoesConverter.convertToDatabaseValue(photoes));
        }
        stmt.bindLong(13, entity.getVip());
    }

    @Override
    protected final void attachEntity(Member entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Member readEntity(Cursor cursor, int offset) {
        Member entity = new Member( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // memberId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nick
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // head
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gender
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // age
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // area
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // QQ
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // wechat
            cursor.isNull(offset + 11) ? null : photoesConverter.convertToEntityProperty(cursor.getString(offset + 11)), // photoes
            cursor.getInt(offset + 12) // vip
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Member entity, int offset) {
        entity.setMemberId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNick(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHead(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAge(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setArea(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setQQ(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWechat(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPhotoes(cursor.isNull(offset + 11) ? null : photoesConverter.convertToEntityProperty(cursor.getString(offset + 11)));
        entity.setVip(cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Member entity, long rowId) {
        entity.setMemberId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Member entity) {
        if(entity != null) {
            return entity.getMemberId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Member entity) {
        return entity.getMemberId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "focus" to-many relationship of Member. */
    public List<Member> _queryMember_Focus(Long memberId) {
        synchronized (this) {
            if (member_FocusQuery == null) {
                QueryBuilder<Member> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MemberId.eq(null));
                member_FocusQuery = queryBuilder.build();
            }
        }
        Query<Member> query = member_FocusQuery.forCurrentThread();
        query.setParameter(0, memberId);
        return query.list();
    }

    /** Internal query to resolve the "funs" to-many relationship of Member. */
    public List<Member> _queryMember_Funs(Long memberId) {
        synchronized (this) {
            if (member_FunsQuery == null) {
                QueryBuilder<Member> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MemberId.eq(null));
                member_FunsQuery = queryBuilder.build();
            }
        }
        Query<Member> query = member_FunsQuery.forCurrentThread();
        query.setParameter(0, memberId);
        return query.list();
    }

    /** Internal query to resolve the "connects" to-many relationship of Play. */
    public List<Member> _queryPlay_Connects(Long memberId) {
        synchronized (this) {
            if (play_ConnectsQuery == null) {
                QueryBuilder<Member> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MemberId.eq(null));
                play_ConnectsQuery = queryBuilder.build();
            }
        }
        Query<Member> query = play_ConnectsQuery.forCurrentThread();
        query.setParameter(0, memberId);
        return query.list();
    }

    /** Internal query to resolve the "memberList" to-many relationship of Play. */
    public List<Member> _queryPlay_MemberList(Long memberId) {
        synchronized (this) {
            if (play_MemberListQuery == null) {
                QueryBuilder<Member> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MemberId.eq(null));
                play_MemberListQuery = queryBuilder.build();
            }
        }
        Query<Member> query = play_MemberListQuery.forCurrentThread();
        query.setParameter(0, memberId);
        return query.list();
    }

    /** Internal query to resolve the "memberList" to-many relationship of Type. */
    public List<Member> _queryType_MemberList(Long memberId) {
        synchronized (this) {
            if (type_MemberListQuery == null) {
                QueryBuilder<Member> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MemberId.eq(null));
                type_MemberListQuery = queryBuilder.build();
            }
        }
        Query<Member> query = type_MemberListQuery.forCurrentThread();
        query.setParameter(0, memberId);
        return query.list();
    }

}
