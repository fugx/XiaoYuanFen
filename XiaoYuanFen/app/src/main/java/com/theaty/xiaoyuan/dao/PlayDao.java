package com.theaty.xiaoyuan.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.theaty.xiaoyuan.model.utils.StringConverter;
import com.theaty.xiaoyuan.model.xiaoyuan.Member;
import com.theaty.xiaoyuan.model.xiaoyuan.Type;
import java.util.List;

import com.theaty.xiaoyuan.model.xiaoyuan.Play;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAY".
*/
public class PlayDao extends AbstractDao<Play, Long> {

    public static final String TABLENAME = "PLAY";

    /**
     * Properties of entity Play.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PlayId = new Property(0, Long.class, "playId", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Time = new Property(3, Long.class, "time", false, "TIME");
        public final static Property Area = new Property(4, String.class, "area", false, "AREA");
        public final static Property Enabled = new Property(5, int.class, "enabled", false, "ENABLED");
        public final static Property Num = new Property(6, int.class, "num", false, "NUM");
        public final static Property Fee = new Property(7, Double.class, "fee", false, "FEE");
        public final static Property Insurance = new Property(8, Double.class, "insurance", false, "INSURANCE");
        public final static Property Introduction = new Property(9, String.class, "introduction", false, "INTRODUCTION");
        public final static Property Photo = new Property(10, String.class, "photo", false, "PHOTO");
        public final static Property Url = new Property(11, String.class, "url", false, "URL");
        public final static Property Note = new Property(12, String.class, "note", false, "NOTE");
        public final static Property TempSession = new Property(13, String.class, "tempSession", false, "TEMP_SESSION");
        public final static Property Photoes = new Property(14, String.class, "photoes", false, "PHOTOES");
        public final static Property MemberId = new Property(15, Long.class, "memberId", false, "MEMBER_ID");
        public final static Property TypeId = new Property(16, Long.class, "typeId", false, "TYPE_ID");
    }

    private DaoSession daoSession;

    private final StringConverter photoesConverter = new StringConverter();
    private Query<Play> member_PublishPlaysQuery;
    private Query<Play> member_CollectPlaysQuery;
    private Query<Play> member_JoinPlaysQuery;
    private Query<Play> type_PlayListQuery;

    public PlayDao(DaoConfig config) {
        super(config);
    }
    
    public PlayDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: playId
                "\"NAME\" TEXT," + // 1: name
                "\"TITLE\" TEXT," + // 2: title
                "\"TIME\" INTEGER," + // 3: time
                "\"AREA\" TEXT," + // 4: area
                "\"ENABLED\" INTEGER NOT NULL ," + // 5: enabled
                "\"NUM\" INTEGER NOT NULL ," + // 6: num
                "\"FEE\" REAL," + // 7: fee
                "\"INSURANCE\" REAL," + // 8: insurance
                "\"INTRODUCTION\" TEXT," + // 9: introduction
                "\"PHOTO\" TEXT," + // 10: photo
                "\"URL\" TEXT," + // 11: url
                "\"NOTE\" TEXT," + // 12: note
                "\"TEMP_SESSION\" TEXT," + // 13: tempSession
                "\"PHOTOES\" TEXT," + // 14: photoes
                "\"MEMBER_ID\" INTEGER," + // 15: memberId
                "\"TYPE_ID\" INTEGER);"); // 16: typeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Play entity) {
        stmt.clearBindings();
 
        Long playId = entity.getPlayId();
        if (playId != null) {
            stmt.bindLong(1, playId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(4, time);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(5, area);
        }
        stmt.bindLong(6, entity.getEnabled());
        stmt.bindLong(7, entity.getNum());
 
        Double fee = entity.getFee();
        if (fee != null) {
            stmt.bindDouble(8, fee);
        }
 
        Double insurance = entity.getInsurance();
        if (insurance != null) {
            stmt.bindDouble(9, insurance);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(10, introduction);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(11, photo);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(12, url);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(13, note);
        }
 
        String tempSession = entity.getTempSession();
        if (tempSession != null) {
            stmt.bindString(14, tempSession);
        }
 
        List photoes = entity.getPhotoes();
        if (photoes != null) {
            stmt.bindString(15, photoesConverter.convertToDatabaseValue(photoes));
        }
 
        Long memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindLong(16, memberId);
        }
 
        Long typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindLong(17, typeId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Play entity) {
        stmt.clearBindings();
 
        Long playId = entity.getPlayId();
        if (playId != null) {
            stmt.bindLong(1, playId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(4, time);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(5, area);
        }
        stmt.bindLong(6, entity.getEnabled());
        stmt.bindLong(7, entity.getNum());
 
        Double fee = entity.getFee();
        if (fee != null) {
            stmt.bindDouble(8, fee);
        }
 
        Double insurance = entity.getInsurance();
        if (insurance != null) {
            stmt.bindDouble(9, insurance);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(10, introduction);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(11, photo);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(12, url);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(13, note);
        }
 
        String tempSession = entity.getTempSession();
        if (tempSession != null) {
            stmt.bindString(14, tempSession);
        }
 
        List photoes = entity.getPhotoes();
        if (photoes != null) {
            stmt.bindString(15, photoesConverter.convertToDatabaseValue(photoes));
        }
 
        Long memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindLong(16, memberId);
        }
 
        Long typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindLong(17, typeId);
        }
    }

    @Override
    protected final void attachEntity(Play entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Play readEntity(Cursor cursor, int offset) {
        Play entity = new Play( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // playId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // area
            cursor.getInt(offset + 5), // enabled
            cursor.getInt(offset + 6), // num
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // fee
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // insurance
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // introduction
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // photo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // url
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // note
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // tempSession
            cursor.isNull(offset + 14) ? null : photoesConverter.convertToEntityProperty(cursor.getString(offset + 14)), // photoes
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // memberId
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16) // typeId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Play entity, int offset) {
        entity.setPlayId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setArea(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEnabled(cursor.getInt(offset + 5));
        entity.setNum(cursor.getInt(offset + 6));
        entity.setFee(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setInsurance(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setIntroduction(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhoto(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNote(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTempSession(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPhotoes(cursor.isNull(offset + 14) ? null : photoesConverter.convertToEntityProperty(cursor.getString(offset + 14)));
        entity.setMemberId(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setTypeId(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Play entity, long rowId) {
        entity.setPlayId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Play entity) {
        if(entity != null) {
            return entity.getPlayId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Play entity) {
        return entity.getPlayId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "publishPlays" to-many relationship of Member. */
    public List<Play> _queryMember_PublishPlays(Long playId) {
        synchronized (this) {
            if (member_PublishPlaysQuery == null) {
                QueryBuilder<Play> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PlayId.eq(null));
                member_PublishPlaysQuery = queryBuilder.build();
            }
        }
        Query<Play> query = member_PublishPlaysQuery.forCurrentThread();
        query.setParameter(0, playId);
        return query.list();
    }

    /** Internal query to resolve the "collectPlays" to-many relationship of Member. */
    public List<Play> _queryMember_CollectPlays(Long playId) {
        synchronized (this) {
            if (member_CollectPlaysQuery == null) {
                QueryBuilder<Play> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PlayId.eq(null));
                member_CollectPlaysQuery = queryBuilder.build();
            }
        }
        Query<Play> query = member_CollectPlaysQuery.forCurrentThread();
        query.setParameter(0, playId);
        return query.list();
    }

    /** Internal query to resolve the "joinPlays" to-many relationship of Member. */
    public List<Play> _queryMember_JoinPlays(Long playId) {
        synchronized (this) {
            if (member_JoinPlaysQuery == null) {
                QueryBuilder<Play> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PlayId.eq(null));
                member_JoinPlaysQuery = queryBuilder.build();
            }
        }
        Query<Play> query = member_JoinPlaysQuery.forCurrentThread();
        query.setParameter(0, playId);
        return query.list();
    }

    /** Internal query to resolve the "playList" to-many relationship of Type. */
    public List<Play> _queryType_PlayList(Long playId) {
        synchronized (this) {
            if (type_PlayListQuery == null) {
                QueryBuilder<Play> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PlayId.eq(null));
                type_PlayListQuery = queryBuilder.build();
            }
        }
        Query<Play> query = type_PlayListQuery.forCurrentThread();
        query.setParameter(0, playId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMemberDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getTypeDao().getAllColumns());
            builder.append(" FROM PLAY T");
            builder.append(" LEFT JOIN MEMBER T0 ON T.\"MEMBER_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN TYPE T1 ON T.\"TYPE_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Play loadCurrentDeep(Cursor cursor, boolean lock) {
        Play entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Member member = loadCurrentOther(daoSession.getMemberDao(), cursor, offset);
        entity.setMember(member);
        offset += daoSession.getMemberDao().getAllColumns().length;

        Type type = loadCurrentOther(daoSession.getTypeDao(), cursor, offset);
        entity.setType(type);

        return entity;    
    }

    public Play loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Play> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Play> list = new ArrayList<Play>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Play> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Play> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
